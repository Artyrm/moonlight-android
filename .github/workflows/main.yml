name: Android CI Debug Build

on:
  # Позволяет запускать вручную со страницы Actions
  workflow_dispatch:
  # Также можно добавить триггеры, например, при пуше в ветку:
  # push:
  #   branches: [ "master" ] # Или ваша основная ветка

jobs:
  build:
    runs-on: ubuntu-latest # Используем стандартный Linux-раннер

    steps:
    # 1. Получаем код из репозитория
    - name: Checkout code
      uses: actions/checkout@v4 # Используем последнюю версию actions/checkout

    # 2. Устанавливаем нужную версию Java (Проверьте build.gradle Moonlight, если нужна конкретная версия, 17 - обычно подходит для современных сборок)
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin' # Используем популярный дистрибутив Temurin
        cache: gradle # Включаем кеширование Gradle

    # 3. Даем права на выполнение Gradle Wrapper'у
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # 4. Собираем Debug APK с помощью Gradle
    - name: Build with Gradle
      # Gradle сам скачает нужные версии Android SDK/NDK, если проект настроен правильно
      run: ./gradlew assembleDebug

    # 5. Загружаем собранный APK как артефакт
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: moonlight-debug-apk # Имя артефакта для скачивания
        # Путь к APK может немного отличаться в зависимости от структуры проекта.
        # Если сборка упадет на этом шаге, проверьте лог, чтобы найти правильный путь.
        path: app/build/outputs/apk/debug/app-debug.apk
        retention-days: 5 # Хранить артефакт 5 дней
